#!/usr/bin/env bash
#
#
#
source /arch-base-install/pkg-files
# Set Vars
sctle="systemctl enable"
si="sed -i"
e="echo"
pcm="pacman"
enstall="pacman -Sy --noconfirm"
# Set locales and time
iso=$(curl -4 ifconfig.co/country-iso)
timedatectl set-ntp true
$enstall archlinux-keyring
$enstall --needed pacman-contrib terminus-font
setfont ter-v22b
$si 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
$enstall --needed reflector rsync grub
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
if [ ! -d /etc/localtime ]; then
  ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
fi
hwclock --systohc
$si '171s/.//' /etc/locale.gen
locale-gen
localectl --no-ask-password set-locale LANG="en_US.UTF-8" LC_TIME="en_US.UTF-8"
reflector -a 48 -c "$iso" -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist
mkdir /mnt &>/dev/null
# Set hostname
$e "arch" >> /etc/hostname
$e { "127.0.0.1    localhost"; "::1          localhost"; "127.0.1.1    arch.localdomain arch" } >> /etc/hosts
# set root password -- comment oout to disable root account -- replace "password" to set password
set_root_password() {
  read -rs -p "Please enter root password: " PASSWORD0
  $e -ne "\n"
  read -rs -p "Please re-enter root password: " PASSWORD1
  if [[ "$PASSWORD0" == "$PASSWORD1" ]]; then
    $e "root:${PASSWORD0} | chpasswd"
  else
    $e -ne "ERROR! Passwords do not match. \n"
    set_root_password
  fi
}
# add chaotic-aur
$enstall archlinux-keyring
pcm-key --init
pcm-key --populate
pcm-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
pcm-key --lsign-key 3056513887B78AEB
$pcm -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
# Modify pacman.conf
if [[ ! -f /etc/pacman.conf ]]; then
  $si '33s/.//' /etc/pacman.conf
  $si '37s/.//' /etc/pacman.conf
  $si '80s/.//' /etc/pacman.conf
  $si '95s/.//' /etc/pacman.conf
  $e "[chaotic-aur]
  #Siglevel=never
  Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
else
  exit
fi
# Modify makepkg.conf
nc=$(grep -c ^processor /proc/cpuinfo)
echo -ne "
-------------------------------------------------------------------------
You have " $nc" cores. And
changing the makeflags for "$nc" cores. Aswell as
changing the compression settings.
-------------------------------------------------------------------------
"
TOTAL_MEM=$(cat /proc/meminfo | grep -i 'memtotal' | grep -o '[[:digit:]]*')
if [[  $TOTAL_MEM -gt 8000000 ]]; then
  sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$nc\"/g" /etc/makepkg.conf
  sed -i "s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T $nc -z -)/g" /etc/makepkg.conf
fi
# determine processor type and install microcode
proc_type=$(lscpu)
if grep -E "GenuineIntel" <<< ${proc_type}; then
  echo "Installing Intel microcode"
  $enstall --needed intel-ucode
  proc_ucode=intel-ucode.img
elif grep -E "AuthenticAMD" <<< ${proc_type}; then
  echo "Installing AMD microcode"
  $enstall --needed amd-ucode
  proc_ucode=amd-ucode.img
fi
# Graphics Drivers find and install
gpu_type=$(lspci)
if grep -E "NVIDIA|GeForce" <<< ${gpu_type}; then
  $enstall --needed nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loader mesa lib-32mesa
  $si 's/MODULES=()/MODULES=(btrfs snd-aloop nvidia nvidia_modeset nvidia_uvm nvidia_drm)'
elif lspci | grep 'VGA' | grep -E "Radeon|AMD"; then
  $enstall --needed xf86-video-amdgpu
elif grep -E "Integrated Graphics Controller" <<< ${gpu_type}; then
  $enstall --needed libva-intel-driver libvdpau-va-gl lib32-vulkan-intel vulkan-intel libva-intel-driver libva-utils lib32-mesa
elif grep -E "Intel Corporation UHD" <<< ${gpu_type}; then
  pacman -S --needed --noconfirm libva-intel-driver libvdpau-va-gl lib32-vulkan-intel vulkan-intel libva-intel-driver libva-utils lib32-mesa
fi
# install git github-cli lazygit
read -rs -p "Install git Packages? (Y)es : (n)o" git
if [ "$git" = n ]
then
  $e "Not Installing git Packages"
else
  $e "Installing git Packages"
  $enstall git lazygit github-cli
fi
# install flatpack
read -rs -p "Install flatpak? (Y)es (n)o" fp
if [ "$fp" = n ]
then
  $e "Not Installing flatpak"
else
  $e "Installing flatpak"
  $enstall flatpak
fi
# Install Base Packages
$e "Installing Base Packages"
$enstall ${basepkglist.txt}
# Install grub
read -rs -p "Install grub? (Y)es (n)o" grub
if [ "$grub" = y ]; then
  $enstall grub
else
end
fi
if [[ ! -d /boot/grub ]]; then
  grub-install --target=X86_64-efi --efi-directory=/boot --bootloader-id=GRUB
  # Comment out if not using nvidia drivers
  $si 's/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet splash amd_iommu=on iommu=pt nvidia_drm.modeset=1"/'
  # Comment out if not using nvidia drivers
  grub-mkconfig -o /boot/grub/grub.cfg
else
  $e "grub already installed"
  fi
# Enable services
$sctle networkmanager
$sctle bluetooth
$sctle sshd
$sctle tlp
$sctle fstrim.timer
$sctle libvirtd
$sctle firewalld
$sctle acpi
# Set user password -- change "password" fpr your password to set password for user
set_password() {
  read -rs -p "Please enter user password: " PASSWORD2
  $e -ne "\n"
  read -rs -p "Please enter user password: " PASSWORD3
  $e -ne "\n"
  if [[ "$PASSWORD2" == "$PASSWORD3" ]]; then
    $e "sshep:${PASSWORD2} | chpasswd"
  else
    $e -ne "ERROR! passwords do not match. \n"
    set_password
  fi
}
# Add user change "sshep" for your username
read -rs -p "Please enter user name: " USERNAME0
useradd -m "${USERNAME0}"
usermod -aG libvirt "${USERNAME0}"
usermod -aG libvirt-qemu "${USERNAME0}"
# usermod -aG doecker "sshep"
$e "${USERNAME0} ALL=(ALL) ALL" >> /etc/sudoers
mv /arch-base-install /home/sshep/repos
$e -ne "base install complete reboot and run next script \n"
