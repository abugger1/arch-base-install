#!/usr/bin/env bash
#
#
#
# Set Vars



sctle="systemctl enable"
si="sed -i"
e="echo"
pky="pacman-key"
pcm="pacman"
enstall="pacman -Sy --noconfirm --needed"


iso=$(curl -4 ifconfig.co/country-iso)
$enstall archlinux-keyring
$pky --init
$pky --populate
$enstall pacman-contrib terminus-font
setfont ter-v32b


cp /etc/makepkg.conf /etc/makepkg.conf.bkp
cp /etc/pacman.conf /etc/pacman.conf.bkp


$si 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
$si 's/^#Color/Color/' /etc/pacman.conf


$enstall --needed reflector rsync grub
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
if [ ! -d /etc/localtime ]; then
    ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
fi


$si 's/^#en_US.UTF-8 UTF-8//en_US.UTF-8 UTF-8' /etc/locale.gen
# $si '171s/.//' /etc/locale.gen
locale-gen
# localectl --no-ask-password set-locale LANG=" en_US.UTF-8" LC_TIME=" en_US.UTF-8"
reflector -a 48 -c "$iso" -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist
mkdir /mnt &>/dev/null


$e "arch" >> /etc/hostname
$e "127.0.0.1    localhost" >> /etc/hosts
$e "::1          localhost" >> /etc/hosts
$e "127.0.1.1    arch.localdomain arch"  >> /etc/hosts


set_root_password() {
    read -rs -p "Please enter root password: " PASSWORD0
    $e -ne "\n"
    read -rs -p "Please re-enter root password: " PASSWORD1
    if [[ "$PASSWORD0" == "$PASSWORD1" ]]; then
        $e "root:${PASSWORD0} | chpasswd"
    else
        $e -ne "ERROR! Passwords do not match. \n"
        set_root_password
    fi
}
set_root_password


$pky --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
$pky --lsign-key 3056513887B78AEB
$pcm -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'



$e "[chaotic-aur]
#Siglevel=never
Include = /etc/pacman.d/chaotic-mirrorlist" >> /etc/pacman.conf
    # $si '78s/#//' /etc/pacman.conf
    # $si '79s/#//' /etc/pacman.conf
    # $si '84s/#//' /etc/pacman.conf
    # $si '85s/#//' /etc/pacman.conf
    # $si '93s/#//' /etc/pacman.conf
    # $si '94s/#//' /etc/pacman.conf



 # nc=$(grep -c ^processor /proc/cpuinfo)
 # $e -ne "
 # -------------------------------------------------------------------------
 # You have "$nc" cores. And
 # changing the makeflags for "$nc" cores. Aswell as
 # changing the compression settings.
 # -------------------------------------------------------------------------
 # "
 # TOTAL_MEM=$(cat /proc/meminfo | grep -i 'memtotal' | grep -o '[[:digit:]]*')
 # if [[  $TOTAL_MEM -gt 8000000 ]]; then
 #     $si "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$nc\"/g" /etc/makepkg.conf
 #     $si "s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T $nc -z -)/g" /etc/makepkg.conf
 #     if [[ ! $? -eq 0 ]]; then
 #         $e "ERROR!"
 #         mv /etc/makepkg.conf.bkp /etc/makepkg.conf
 #         mv /etc/pacman.conf.bkp /etc/pacman.conf
 #     fi
 # else
 #     $e $?
 #     exit
 # fi
 #
 #
 #



proc_type=$(lscpu)
if grep -E "GenuineIntel" <<< ${proc_type}; then
    $e "Installing Intel microcode"
    $enstall --needed intel-ucode
    proc_ucode=intel-ucode.img
elif grep -E "AuthenticAMD" <<< ${proc_type}; then
    $e "Installing AMD microcode"
    $enstall --needed amd-ucode
    proc_ucode=amd-ucode.img
fi



gpu_type=$(lspci)
if grep -E "NVIDIA|GeForce" <<< ${gpu_type}; then
    $enstall nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loader mesa lib32-mesa
    $si 's/MODULES=()/MODULES=(btrfs snd-aloop nvidia nvidia_modeset nvidia_uvm nvidia_drm)' /etc/mkinitcpio.conf
elif lspci | grep 'VGA' | grep -E "Radeon|AMD"; then
    $enstall xf86-video-amdgpu
elif grep -E "Integrated Graphics Controller" <<< ${gpu_type}; then
    $enstall libva-intel-driver libvdpau-va-gl lib32-vulkan-intel vulkan-intel libva-intel-driver libva-utils lib32-mesa
elif grep -E "Intel Corporation UHD" <<< ${gpu_type}; then
    $enstall libva-intel-driver libvdpau-va-gl lib32-vulkan-intel vulkan-intel libva-intel-driver libva-utils lib32-mesa
fi



read -rs -p "Install git Packages? (Y)es : (n)o" git
if [ "$git" = n ]
then
    $e "Not Installing git Packages"
else
    $e "Installing git Packages"
    $enstall git lazygit github-cli
fi



read -rs -p "Install flatpak? (Y)es (n)o" fp
if [ "$fp" = n ]
then
    $e "Not Installing flatpak"
else
    $e "Installing flatpak"
    $enstall flatpak
fi



$e "Installing Base Packages"
cat /arch-base-install/pkg-files/basepkglist.txt | while read line
do
    if [[ ${line} == '--END OF BASE INSTALL--' ]]; then
        continue
    fi
    $e "INSTALLING: ${line}"
    $enstall "${line}"
done



read -rs -p "Install grub? (Y)es (n)o" grub
if [ "$grub" = y ]; then
    $enstall grub
else
end
fi


    # grub-install --target=X86_64-efi --efi-directory=/boot --bootloader-id=GRUB

    # $si 's/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet splash amd_iommu=on iommu=pt nvidia_drm.modeset=1"/'

    # grub-mkconfig -o /boot/grub/grub.cfg



    $sctle NetworkManager
    $sctle bluetooth
    $sctle sshd
    $sctle tlp
    $sctle fstrim.timer
    $sctle libvirtd
    $sctle firewalld
    $sctle acpi


    set_username(){
        read -rs -p "Please enter user name: " USERNAME0
        $e "${USERNAME0}"
        useradd -m "${USERNAME0}"
        # usermod -aG libvirt "${USERNAME0}"
        # usermod -aG libvirt-qemu "${USERNAME0}"
        $e "${USERNAME0} ALL=(ALL) ALL" >> /etc/sudoers
    }
    set_username



    set_password() {
        read -rs -p "Please enter user password: " PASSWORD2
        $e -ne "\n"
        read -rs -p "Please enter user password: " PASSWORD3
        $e -ne "\n"
        if [[ "$PASSWORD2" == "$PASSWORD3" ]]; then
            $e "${USERNAME0}:${PASSWORD2} | chpasswd"
        else
            $e -ne "ERROR! passwords do not match. \n"
            set_password
        fi
    }
set_password



    mkdir $HOME/repos
    cp /arch-base-install $HOME/repos
    chown -hR sshep:sshep $HOME/repos


    $e -ne "base install complete reboot and run next script \n"
